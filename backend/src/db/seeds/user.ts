import { hash } from "bcrypt";
import { InferInsertModel } from "drizzle-orm";
import { faker } from "@faker-js/faker";
import { DB } from "..";
import { users } from "../schema/user";

/**
 * mock
 * @returns A promise containing an array of users
 * Not using zod validation here as it's not necessary
 */

async function mock(): Promise<InferInsertModel<typeof users>[]> {
  const data: InferInsertModel<typeof users>[] = [];
  for (let i = 0; i < 20; i++) {
    const password = faker.internet.password();
    const hashedPassword = await hash(password, 10);

    data.push({
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      email: faker.internet.email().toLowerCase(),
      password: hashedPassword
    });
  }
  return data;
}

/**
 * seed
 * @param db The database to perform the insert on
 *
 * Inserts the data generated by mock into the users table of the database passed in
 */
export async function seed(db: DB) {
  await db.insert(users).values(await mock());
}
